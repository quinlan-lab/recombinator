{
    "docs": [
        {
            "location": "/", 
            "text": "recombinator\n\n\nrecombinator\n calls crossovers, de novo mutations, given phased or unphased VCFs.\n\n\nIt will extract information, make plots, and report info about variants.\n\n\npython -m recombinator \\\n    recombinator \\\n    --ped $ped \\\n    --vcf $vcf \\\n    --region $chrom \\\n    --prefix xos\n\n\n\n\nThis will output a directory structure with informative sites per-family and then an aggregate file\nwith all families that looks like:\n\n\nchrom   start   end family_id   parent_id   left-block  left-informative-sites  right-block right-informative-sites change\n6   13362448    13371471    xx109   GOG012978   6:205799-13362449   5317    6:13371471-42449797 12572   0-1\n6   42449796    42454760    xx109   GOG012978   6:13371471-42449797 12572   6:42454760-52769531 3372    1-0\n6   52769530    52799232    xx109   GOG012978   6:42454760-52769531 3372    6:52799232-72183699 7443    0-1\n6   72183698    72210615    xx109   GOG012978   6:52799232-72183699 7443    6:72210615-111961096    12339   1-0\n6   111961095   111971518   xx109   GOG012978   6:72210615-111961096    12339   6:111971518-133578815   5639    0-1\n6   133578814   133617587   xx109   GOG012978   6:111971518-133578815   5639    6:133617587-154285086   6058    1-0\n6   154285085   154318283   xx109   GOG012978   6:133617587-154285086   6058    6:154318283-170919515   4753    0-1\n6   110849230   110909829   xx109   GOG10572    6:7934314-110849231 36477   6:110909829-167867452   18916   1-0\n6   167867451   167871017   xx109   GOG10572    6:110909829-167867452   18916   6:167871017-170919470   1267    0-1\n6   11221929    11249151    x3750   GOG08928    6:217200-11221930   4411    6:11249151-14621353 1188    1-0\n6   14621352    14626728    x3750   GOG08928    6:11249151-14621353 1188    6:14626728-138337903    54524   0-1\n6   138337902   138352068   x3750   GOG08928    6:14626728-138337903    54524   6:138352068-170921794   16314   1-0\n\n\n\n\nThat's for unphased data. For phased data, it will also list the kid in\nwhich the crossover is detected (not possible in unphased).\n\n\nThere will be files:\n+ $prefix/$region.crossovers-unfiltered.bed\n  - contains the only mimimally filtered crossovers that seem valid for all samples\n+ $prefix/$region.crossovers.bed\n  - contains a more filtered set (but may exclude small gene conversions) for all samples\n+ $prefix/$region/$region.$family.png shows a plot of the crossovers like the example below.\n+ $prefix/$region/$region.$family.$parent.bed.gz contains all of the informative sites\n  in that parent. Any time the 'same' column changes, there is a putative crossover.\n\n\nExample Plot\n\n\nFirst we show where there is a true crossover. The black points indicate informative variants.\nThe values of the black points indicate the crossover state where\nthe value is 1 if the alternate allele is at the same index (1st or 2nd) in both the parent\nand the kid. The value is 0 if they are different. We can see that the genotype calls are extremely\ngood here, in many cases, we'd expect to see more single points outside of the blue blocks which\nindicate the inferred state for a region. The red line indicates the location of a crossover.\n\n\n\n\nBelow, we show a case where there is no crossover for the entire chromosome. We do see a few noisy\npoints that are likely due to genotyping error.\n\n\n\n\nCohort Plots and Stats\n\n\nOnce the recombinator script has run. The \ncohort-plots\n command\ncan be run as:\n\n\npython -m recombinator cohort-plots --ped $ped --prefix $prefix crossovers.bed\n\n\n\n\nand it will output a plot of crossover hot-spots separated by chromosome\nand separating maternal from paternal. E.g.\n\n\n\n\nWhere we see a nice hotspot from fathers at about 65MB on chromosome 13.\nThe dashed lines indicate a z-score cutoff of \n= 2.58, meaning values above (or below for males) that line\nare above the 99.5% confidence of the data. We do not assume the data is normally distributed, but this makes\na reasonable cutoff for plotting.\n\n\nA bed file is sent to stdout with:\n+ the number of crossovers at each site\n+ the parental sex of 'male', 'female', or 'both' where 'both is the sum of male and female crossovers.\n+ the zscore of the number of crossovers.\nIt is expected that users will filter this to their own z-score cutoff and sex as needed.\n\n\nIt will also create an aggregate plot with the count of maternal and paternal crossovers:\n\n\n\nEnrichment\n\n\nAfter finding per-sample recombination sites, we will want to know if certain events are enriched in those crossovers. For example, we may expect that de novos are more likely to occur in a crossover\nfrom the same sample.\nWe can evaluate this by comparing the observed number of overlaps between crossovers and de novos\nin the same sample Vs the expected, which we derive by shuffling the sample-ids of the crossovers.\nBy shuffling the sample ids, we avoid bias due to genome composition at crossovers that would\ncome into play if we shuffled the spatial location of the events.\n\n\nThis can be done like this:\n\n\npython -m recombinator enrichment $crossovers.all-samples.bed denovos.all-samples.bed --simulations 1000\n\n\n\n\nTo compare the sample-overlap in 1000 simulations to the single observed event.\nThis assumes that \ncrossovers.all-samples.bed\n and \ndenovos.all-samples.bed\n have a \nsample_id\n\ncolumn that indicates the sample in which the event occurred.\n\n\nAn example output looks like:\n\n\n\n\nWhere we see that, the observed de-novo::xo overlaps shown as the green line (57) is higher than\nnearly all of the simulated values in blue.\n\n\nWhile this example is for de novos, it can be used to compare crossovers to any data containg regions labelled by sample.\n\n\nPhased vs Unphased\n\n\nIn our experience, it's not simple to phase large cohorts with available methods. Beagle is quadratic in the\nnumber of samples and shapeit does not give good results even with strict quality-filtering on input variants.\n\n\nTo get around this, the pipeline we recommend is to run \nrecombinator\n on the unphased VCF. Then, run\n\nphased-from-unphased.sh\n which will gather any pairs of variants between which there is a state-change.\nIt will combine those crossover-bounding variants with the (~2.5 million) omni-2.5 sites, output a with\nonly those sites, phase it, and run recombinator on the phased.", 
            "title": "Home"
        }, 
        {
            "location": "/#recombinator", 
            "text": "recombinator  calls crossovers, de novo mutations, given phased or unphased VCFs.  It will extract information, make plots, and report info about variants.  python -m recombinator \\\n    recombinator \\\n    --ped $ped \\\n    --vcf $vcf \\\n    --region $chrom \\\n    --prefix xos  This will output a directory structure with informative sites per-family and then an aggregate file\nwith all families that looks like:  chrom   start   end family_id   parent_id   left-block  left-informative-sites  right-block right-informative-sites change\n6   13362448    13371471    xx109   GOG012978   6:205799-13362449   5317    6:13371471-42449797 12572   0-1\n6   42449796    42454760    xx109   GOG012978   6:13371471-42449797 12572   6:42454760-52769531 3372    1-0\n6   52769530    52799232    xx109   GOG012978   6:42454760-52769531 3372    6:52799232-72183699 7443    0-1\n6   72183698    72210615    xx109   GOG012978   6:52799232-72183699 7443    6:72210615-111961096    12339   1-0\n6   111961095   111971518   xx109   GOG012978   6:72210615-111961096    12339   6:111971518-133578815   5639    0-1\n6   133578814   133617587   xx109   GOG012978   6:111971518-133578815   5639    6:133617587-154285086   6058    1-0\n6   154285085   154318283   xx109   GOG012978   6:133617587-154285086   6058    6:154318283-170919515   4753    0-1\n6   110849230   110909829   xx109   GOG10572    6:7934314-110849231 36477   6:110909829-167867452   18916   1-0\n6   167867451   167871017   xx109   GOG10572    6:110909829-167867452   18916   6:167871017-170919470   1267    0-1\n6   11221929    11249151    x3750   GOG08928    6:217200-11221930   4411    6:11249151-14621353 1188    1-0\n6   14621352    14626728    x3750   GOG08928    6:11249151-14621353 1188    6:14626728-138337903    54524   0-1\n6   138337902   138352068   x3750   GOG08928    6:14626728-138337903    54524   6:138352068-170921794   16314   1-0  That's for unphased data. For phased data, it will also list the kid in\nwhich the crossover is detected (not possible in unphased).  There will be files:\n+ $prefix/$region.crossovers-unfiltered.bed\n  - contains the only mimimally filtered crossovers that seem valid for all samples\n+ $prefix/$region.crossovers.bed\n  - contains a more filtered set (but may exclude small gene conversions) for all samples\n+ $prefix/$region/$region.$family.png shows a plot of the crossovers like the example below.\n+ $prefix/$region/$region.$family.$parent.bed.gz contains all of the informative sites\n  in that parent. Any time the 'same' column changes, there is a putative crossover.", 
            "title": "recombinator"
        }, 
        {
            "location": "/#example-plot", 
            "text": "First we show where there is a true crossover. The black points indicate informative variants.\nThe values of the black points indicate the crossover state where\nthe value is 1 if the alternate allele is at the same index (1st or 2nd) in both the parent\nand the kid. The value is 0 if they are different. We can see that the genotype calls are extremely\ngood here, in many cases, we'd expect to see more single points outside of the blue blocks which\nindicate the inferred state for a region. The red line indicates the location of a crossover.   Below, we show a case where there is no crossover for the entire chromosome. We do see a few noisy\npoints that are likely due to genotyping error.", 
            "title": "Example Plot"
        }, 
        {
            "location": "/#cohort-plots-and-stats", 
            "text": "Once the recombinator script has run. The  cohort-plots  command\ncan be run as:  python -m recombinator cohort-plots --ped $ped --prefix $prefix crossovers.bed  and it will output a plot of crossover hot-spots separated by chromosome\nand separating maternal from paternal. E.g.   Where we see a nice hotspot from fathers at about 65MB on chromosome 13.\nThe dashed lines indicate a z-score cutoff of  = 2.58, meaning values above (or below for males) that line\nare above the 99.5% confidence of the data. We do not assume the data is normally distributed, but this makes\na reasonable cutoff for plotting.  A bed file is sent to stdout with:\n+ the number of crossovers at each site\n+ the parental sex of 'male', 'female', or 'both' where 'both is the sum of male and female crossovers.\n+ the zscore of the number of crossovers.\nIt is expected that users will filter this to their own z-score cutoff and sex as needed.  It will also create an aggregate plot with the count of maternal and paternal crossovers:", 
            "title": "Cohort Plots and Stats"
        }, 
        {
            "location": "/#enrichment", 
            "text": "After finding per-sample recombination sites, we will want to know if certain events are enriched in those crossovers. For example, we may expect that de novos are more likely to occur in a crossover\nfrom the same sample.\nWe can evaluate this by comparing the observed number of overlaps between crossovers and de novos\nin the same sample Vs the expected, which we derive by shuffling the sample-ids of the crossovers.\nBy shuffling the sample ids, we avoid bias due to genome composition at crossovers that would\ncome into play if we shuffled the spatial location of the events.  This can be done like this:  python -m recombinator enrichment $crossovers.all-samples.bed denovos.all-samples.bed --simulations 1000  To compare the sample-overlap in 1000 simulations to the single observed event.\nThis assumes that  crossovers.all-samples.bed  and  denovos.all-samples.bed  have a  sample_id \ncolumn that indicates the sample in which the event occurred.  An example output looks like:   Where we see that, the observed de-novo::xo overlaps shown as the green line (57) is higher than\nnearly all of the simulated values in blue.  While this example is for de novos, it can be used to compare crossovers to any data containg regions labelled by sample.", 
            "title": "Enrichment"
        }, 
        {
            "location": "/#phased-vs-unphased", 
            "text": "In our experience, it's not simple to phase large cohorts with available methods. Beagle is quadratic in the\nnumber of samples and shapeit does not give good results even with strict quality-filtering on input variants.  To get around this, the pipeline we recommend is to run  recombinator  on the unphased VCF. Then, run phased-from-unphased.sh  which will gather any pairs of variants between which there is a state-change.\nIt will combine those crossover-bounding variants with the (~2.5 million) omni-2.5 sites, output a with\nonly those sites, phase it, and run recombinator on the phased.", 
            "title": "Phased vs Unphased"
        }
    ]
}